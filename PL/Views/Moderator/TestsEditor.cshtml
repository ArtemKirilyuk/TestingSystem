
@using Microsoft.Ajax.Utilities
@using PL.Infrastructure.Helpers
@model PL.ViewModels.TestEditorViewModel
@{
    ViewBag.Title = "Moderator room";
}
@section Search
        {@using (Ajax.BeginForm("TestsEditor", new { page = 1 }, new AjaxOptions { UpdateTargetId = "results" }))
        {
            <div class="col-sm-3 col-md-3" style="margin-top: 7px">
                <div class="input-group">
                    <input type="text" class="form-control" name="searchItem" placeholder="Search...">
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="submit" value="Search">
                            <i class="glyphicon glyphicon-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        }}
<div id="results">
    <h1>Moderator room</h1>
    <div class="form-group">
        @Html.LabelFor(m => m.ShowNotValid, new { @class = "col-md-3 control-label" })
        <div class="col-md-5">
            Yes: @Html.RadioButtonFor(m => m.ShowNotValid, true, new { @class = "radio-inline", form="form0", name="showNotValid", onclick="getNotValidTests()"})
            No:  @Html.RadioButtonFor(m => m.ShowNotValid, false, new { @class = "radio-inline", form = "form0", name = "showNotValid", onclick = "getNotValidTests()" })
        </div>
    </div>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Tests.GetEnumerator().Current.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tests.GetEnumerator().Current.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tests.GetEnumerator().Current.Creator)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tests.GetEnumerator().Current.IsValid)
            </th>
        </tr>

        @foreach (var item in Model.Tests)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)

                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Creator)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsValid)
                </td>
                <td>
                    @Html.ActionLink("Edit", "EditTest", new {id = item.Id}) |
                    @Ajax.ActionLink("Delete", "DeleteTest", new {id = item.Id, name = Model.PageInfo.SearchItem, page = Model.PageInfo.PageNumber },
                        new AjaxOptions {Confirm = "Do you want delete '" + item.Name + "'?", UpdateTargetId = "results"}, new {@class="text-danger"})
                </td>
            </tr>
        }

    </table>
    <div class="text-center">
        @if (Model.PageInfo.TotalPages <= 4)
        {
            @Html.FewPageLinks(Model.PageInfo, (x, y) => Url.Action("TestsEditor", new { page = x, searchItem = y, showNotValid = Model.ShowNotValid }))
        }
        else
        {
            @Html.PageTopLink(Model.PageInfo, (x, y) => Url.Action("TestsEditor", new { page = x, searchItem = y }))

            @Html.PageLinks(Model.PageInfo, (x, y) => Url.Action("TestsEditor", new { page = x, searchItem = y, showNotValid = Model.ShowNotValid }))

            @Html.PageEndLink(Model.PageInfo, (x, y) => Url.Action("TestsEditor", new { page = x, searchItem = y }))
        }

    </div>

</div>
@Scripts.Render("~/scripts/jquery-3.1.1.min.js")
@Scripts.Render("~/scripts/jquery.unobtrusive-ajax.min.js")
@Scripts.Render("~/scripts/customScript.js")




