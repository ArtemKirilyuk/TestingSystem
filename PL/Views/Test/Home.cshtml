@using PL.Infrastructure.Helpers
@model PL.ViewModels.HomeViewModel
@{
    ViewBag.Title = "Home";
}


<div id="results">
    <div class="container-fluid text-center">
        @section Search
        {@using (Ajax.BeginForm("Home", new {page = 1}, new AjaxOptions {UpdateTargetId = "results"}))
         {
             <div class="col-sm-3 col-md-3" style="margin-top: 7px">
                 <div class="input-group">
                     <input type="text" class="form-control" name="searchItem" placeholder="Search...">
                     <div class="input-group-btn">
                         <button class="btn btn-default" type="submit" value="Search">
                             <i class="glyphicon glyphicon-search"></i>
                         </button>
                     </div>
                 </div>
             </div>
         }}
        <div class="row content"><h1 class="text-default text-center">Testing System</h1></div>
        <div class="row content">
            <div class="col-sm-8 text-left">
                <h3>List of tests</h3>
                    <div class="list-group">
                        @foreach (var item in Model.Tests)
                        {
                            if (item.IsValid)
                            {
                                <div class="list-group-item">

                                    <div class="container">
                                        <div class="row">
                                            <div class="col-sm"><strong>Test name: <span class="text-warning">@item.Name</span></strong> </div>
                                            <div class="col-sm"><strong>The creator the test:</strong> @item.Creator</div>
                                            <div class="col-sm"><strong>The count of questions the test:</strong> @item.Questions.Count</div>
                                            <div class="col-sm"><strong>The time for passing the test:</strong> @item.Time</div>
                                            <div class="col-sm"><i><strong>Description:</strong></i></div>
                                            <div class="col-sm">@item.Description</div>
                                            <div class="col-sm">
                                                @Html.ActionLink("Start test", "Passing", new {id = item.Id}, new {@class = "btn btn-success"})
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                <div class="text-center">
                    @if (Model.PageInfo.TotalPages <= 4)
                    {
                        @Html.FewPageLinks(Model.PageInfo, (x, y) => Url.Action("Home", new {page = x, searchItem = y}))
                    }
                    else
                    {
                        @Html.PageTopLink(Model.PageInfo, (x, y) => Url.Action("Home", new {page = x, searchItem = y}))

                        @Html.PageLinks(Model.PageInfo, (x, y) => Url.Action("Home", new {page = x, searchItem = y}))

                        @Html.PageEndLink(Model.PageInfo, (x, y) => Url.Action("Home", new {page = x, searchItem = y}))
                    }

                </div>
            </div>
            <div class="col-sm-4">
                <h3 class="text-success">Welcome to TS!</h3>
                <h4 class="text-muted text-center">Here you can try out yourself in our tests! Besides, there is a capability of creating your own tests</h4>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/scripts/jquery-3.1.1.min.js")
    @Scripts.Render("~/scripts/jquery.unobtrusive-ajax.min.js")
}